# Pydantic schemas for Customer Support Agent

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime

class QueryInput(BaseModel):
    query_id: Optional[str] = Field(None, example="QRY20231027ABC001") # Can be generated by the system
    customer_id: str = Field(..., example="CUSTSPT001")
    channel: str = Field(..., example="chat") # chat, email, phone_call_summary
    text: str = Field(..., example="I can't log in to my mobile banking app.")
    timestamp: datetime = Field(default_factory=datetime.now)
    metadata: Optional[Dict[str, Any]] = Field(None, example={"device_type": "Android", "app_version": "3.2.1"})
    conversation_id: Optional[str] = Field(None, example="conv_1678886400")

class SuggestedSolution(BaseModel):
    source: str = Field(..., example="KnowledgeBase") # KnowledgeBase, CRMHistory, CoreBankingAPI
    confidence: Optional[float] = Field(None, example=0.85)
    steps: Optional[List[str]] = Field(None)
    answer_text: Optional[str] = Field(None)

class QueryResponse(BaseModel):
    query_id: str
    response_text: str = Field(..., example="Please try resetting your password. Here's a link: ...")
    status: str = Field(..., example="Resolved") # Resolved, PendingHuman, Escalated, InformationProvided
    escalated_to_human: bool = False
    escalation_ticket_id: Optional[str] = Field(None)
    suggested_solutions_considered: Optional[List[SuggestedSolution]] = Field(None)
    crm_interaction_id: Optional[str] = Field(None, example="INT123456")
    sentiment_analysis: Optional[Dict[str, float]] = Field(None, example={"score": 0.8, "label": "positive"})

class ComplaintInput(BaseModel):
    complaint_id: Optional[str] = Field(None, example="CMP20231027XYZ002") # Can be generated
    customer_id: str
    channel: str
    complaint_details: str = Field(..., example="The ATM at Marina branch did not dispense cash but my account was debited.")
    desired_resolution: Optional[str] = Field(None, example="I want a full reversal of the debited amount.")
    timestamp: datetime = Field(default_factory=datetime.now)

class ComplaintLogResponse(BaseModel):
    complaint_id: str
    ticket_id: str # From CRM or ticketing system
    status: str = Field("Logged", example="Logged") # Logged, Investigating, Resolved
    message: str = Field("Complaint has been logged successfully.")

class ChatMessage(BaseModel):
    conversation_id: str
    customer_id: str
    role: str = Field(..., example="user") # user, agent
    text: str
    timestamp: datetime = Field(default_factory=datetime.now)

print("Customer Support Agent Pydantic schemas placeholder.")
